name: lint_pr

on:
  pull_request_target:
    types:
      - opened
      - edited
      - synchronize

env:
  PR_TITLE: ${{ toJson(github.event.pull_request.title) }}
  PR_NUMBER: ${{ toJson(github.event.pull_request.number) }}
  REPO: "github.com/weka/csi-wekafs"

jobs:
  main:
    name: Validate PR title
    runs-on: ubuntu-latest
    steps:
    
# feat(ui): Add `Button` component
# ^    ^    ^
# |    |    |__ Subject
# |    |_______ Scope
# |____________ Type

      - uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Configure which types are allowed (newline-delimited).
          # Default: https://github.com/commitizen/conventional-commit-types
          types: |
            ci
            chore
            refactor
            feat
            fix
            docs
            style
            breaking
            test
          # Configure which scopes are allowed (newline-delimited).
          # These are regex patterns auto-wrapped in `^ $`.
          scopes: |
            deps
            CSI-\d+
          # Configure that a scope must always be provided.
          requireScope: true
          # Configure which scopes are disallowed in PR titles (newline-delimited).
          # For instance by setting the value below, `chore(release): ...` (lowercase)
          # and `ci(e2e,release): ...` (unknown scope) will be rejected.
          # These are regex patterns auto-wrapped in `^ $`.
          disallowScopes: |
            aloha
          # Configure additional validation for the subject based on a regex.
          # This example ensures the subject doesn't start with an uppercase character.
          subjectPattern: ^(?![A-Z]).+$
          # If `subjectPattern` is configured, you can use this property to override
          # the default error message that is shown when the pattern doesn't match.
          # The variables `subject` and `title` can be used within the message.
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.
          # If you use GitHub Enterprise, you can set this to the URL of your server
          #githubBaseUrl: https://github.myorg.com/api/v3
          
          # If the PR contains one of these newline-delimited labels, the
          # validation is skipped. If you want to rerun the validation when
          # labels change, you might want to use the `labeled` and `unlabeled`
          # event triggers in your workflow.
          ignoreLabels: |
            ci
            ignore-semantic-pull-request
          # If you're using a format for the PR title that differs from the traditional Conventional
          # Commits spec, you can use these options to customize the parsing of the type, scope and
          # subject. The `headerPattern` should contain a regex where the capturing groups in parentheses
          # correspond to the parts listed in `headerPatternCorrespondence`.
          # See: https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-commits-parser#headerpattern
          #headerPattern: '^(\w*)(?:\(([\w$.\-*/ ]*)\))?: (.*)$'
          #headerPatternCorrespondence: type, scope, subject


  renovate:
    # do the job only once upon the PR creation
    if: ${{ github.event.pull_request.user.login == 'renovate[bot]' && github.event.action == 'labeled' && github.event.label.name == 'sidecar' }}
    runs-on: ubuntu-latest
    steps:

      # might be useful    
      # - name: get-title
      #   id: title
      #   run: |
      #     gh pr view $PR_NUMBER --json=title --repo=$REPO | jq -r .title > title
      #     echo title=`cat title | cut -d ":" -f 2 | awk '{$1=$1;print}'` >> $GITHUB_OUTPUT
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: https://wekaio.atlassian.net/
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          
      # might be useful    
      # - uses: atlassian/gajira-find-issue-key@v3
      #   id: find
      #   with:
      #     string: ${{ env.PR_TITLE }}
      #     from: ""

      - uses: atlassian/gajira-create@v3
        id: create
        with:
          project: CSI
          issuetype: Task
          summary: ${{ steps.title.outputs.title }}
          #fields: '{"customfield_10171": "test"}'
          # https://confluence.atlassian.com/jirakb/how-to-find-any-custom-field-s-ids-744522503.html
          
      - name: commend-and-label
        if: steps.create.outcome == 'success'
        run: |

          gh pr comment $PR_NUMBER --body "Jira item was created [${CSI}](https://wekaio.atlassian.net/browse/${CSI})" --repo=$REPO
          gh pr edit $PR_NUMBER --add-label "linted" --repo=$REPO
        env:
          GH_TOKEN: ${{ secrets.BOTTY_GH_TOKEN }}
          CSI: ${{ steps.create.outputs.issue }}
