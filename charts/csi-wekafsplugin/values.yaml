# Default values for csi-wekafsplugin.

# -- Directory in root of file system where dynamic volumes are provisioned
dynamicProvisionPath: "csi-volumes"
# -- Name of the driver (and provisioner)
csiDriverName: "csi.weka.io"
# -- CSI driver version
csiDriverVersion: &csiDriverVersion 2.8.0-SNAPSHOT.149.sha.af85d7e
images:
  # -- CSI liveness probe sidecar image URL
  livenessprobesidecar: registry.k8s.io/sig-storage/livenessprobe:v2.16.0
  # -- CSI attacher sidecar image URL
  attachersidecar: registry.k8s.io/sig-storage/csi-attacher:v4.9.0
  # -- CSI provisioner sidecar image URL
  provisionersidecar: registry.k8s.io/sig-storage/csi-provisioner:v5.3.0
  # -- CSI registrar sidercar
  registrarsidecar: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.14.0
  # -- CSI resizer sidecar image URL
  resizersidecar: registry.k8s.io/sig-storage/csi-resizer:v1.14.0
  # -- CSI snapshotter sidecar image URL
  snapshottersidecar: registry.k8s.io/sig-storage/csi-snapshotter:v8.3.0
  # -- CSI driver main image URL
  csidriver: quay.io/weka.io/csi-wekafs
  # -- CSI driver tag
  csidriverTag: *csiDriverVersion
# -- image pull secret required for image download. Must have permissions to access all images above.
#    Should be used in case of private registry that requires authentication
imagePullSecret: ""
# -- Tolerations for all CSI driver components
globalPluginTolerations: &globalPluginTolerations
  - key: node-role.kubernetes.io/master
    operator: Exists
    effect: NoSchedule
# -- Tolerations for CSI controller component only (by default same as global)
controllerPluginTolerations: *globalPluginTolerations
# -- Tolerations for CSI node component only (by default same as global)
nodePluginTolerations: *globalPluginTolerations
# -- Optional nodeSelector for CSI plugin deployment on certain Kubernetes nodes only
#    This nodeselector will be applied to all CSI plugin components
nodeSelector: {}
# -- Optional affinity for CSI plugin deployment
#    This affinity will be applied to all CSI plugin components
affinity: {}
# -- Optional setting for OCP platform only, which machineconfig pools to apply the Weka SELinux policy on
#    NOTE: by default, the policy will be installed both on workers and control plane nodes
machineConfigLabels:
  - "worker"
  - "master"
# Controller-specific parameters, please do not change unless explicitly guided
controller:
  # -- Controller number of replicas
  replicas: 2
  # -- Maximum concurrent requests from sidecars (global)
  maxConcurrentRequests: 5
  # -- maximum concurrent operations per operation type
  concurrency:
    createVolume: 5
    deleteVolume: 5
    expandVolume: 5
    createSnapshot: 5
    deleteSnapshot: 5
  # -- Return GRPC Unavailable if request waits in queue for that long time (seconds)
  grpcRequestTimeoutSeconds: 30
  # -- Configure provisioner sidecar for leader election
  configureProvisionerLeaderElection: true
  # -- Configure resizer sidecar for leader election
  configureResizerLeaderElection: true
  # -- Configure snapshotter sidecar for leader election
  configureSnapshotterLeaderElection: true
  # -- Configure attacher sidecar for leader election
  configureAttacherLeaderElection: true
  # -- optional nodeSelector for controller components only
  nodeSelector: {}
  # -- optional affinity for controller components only
  affinity: {}
  # -- optional labels to add to controller deployment
  labels: {}
  # -- optional labels to add to controller pods
  podLabels: {}
  # -- termination grace period for controller pods
  terminationGracePeriodSeconds: 10
# Node-specific parameters, please do not change unless explicitly guided
node:
  # -- Maximum concurrent requests from sidecars (global)
  maxConcurrentRequests: 5
  # -- maximum concurrent operations per operation type (to avoid API starvation)
  concurrency:
    nodePublishVolume: 5
    nodeUnpublishVolume: 5
  # -- Return GRPC Unavailable if request waits in queue for that long time (seconds)
  grpcRequestTimeoutSeconds: 30
  # -- optional nodeSelector for node components only
  nodeSelector: {}
  # -- optional affinity for node components only
  affinity: {}
  # -- optional labels to add to node daemonset
  labels: {}
  # -- optional labels to add to node pods
  podLabels: {}
  # -- termination grace period for node pods
  terminationGracePeriodSeconds: 10
# -- Metrics server parameters, used for exposing WEKA metrics in Prometheus format
metricsServer:
  # -- Allow CSI plugin to report WEKA metrics in Prometheus format.
  #    NOTE: this implies that the CSI plugin will get access to all Kubernetes PVs, and fetch their credentials, then query WEKA cluster for those metrics
  enabled: true
  # -- Number of replicas for metrics server
  replicas: 2
  # -- optional nodeSelector for metrics server only
  nodeSelector: {}
  # -- optional affinity for metrics server only
  affinity: {}
  # -- optional labels to add to metrics server deployment
  labels: {}
  # -- optional labels to add to metrics server pods
  podLabels: {}
  # -- tolerations for metrics server only
  tolerations: *globalPluginTolerations
  # -- concurrent requests for WEKA API (excluding quota)
  maxConcurrentRequests: 50
  # -- metrics fetch interval in seconds, default is 60 seconds.
  #    Only expired metrics will be updated, set by quotaCacheValiditySeconds
  metricsFetchIntervalSeconds: 10
  # -- termination grace period for metrics server pods
  terminationGracePeriodSeconds: 10
  # -- enable leader election for metrics server
  enableLeaderElection: true
  # -- number of concurrent requests for metrics server to update quotas
  quotaUpdateConcurrentRequests: 25
  # -- the time period for which quotaMap of a certain filesystem should be considered valid. usually should match metricsFetchIntervalSeconds,
  #    but in deployments with thousands of PVCs this can be increased to reduce the load on the metrics server.
  #    Metrics in such case will be updated less frequently. But for each metric, a last update time will be recorded
  quotaCacheValiditySeconds: 240
  # -- Timeout for API client requests, in seconds. Default is 120 seconds. Increased to 180 seconds to allow for larger operations like quotamap fetching
  apiClientTimeoutSeconds: 180
  # -- Enable metrics server to fetch metrics from WEKA API using batches (all quotas for a filesystem in one request).
  #    This is useful for large filesystems with many PVCs, as it reduces the number of requests to WEKA API.
  #    This is disabled by default.
  #    The drawback is that in such case, metrics will be reported less frequently, using cached values.
  #    Report timestamp will be recorded for each metric, so you can see when the last update was.
  #    This requires Prometheus server to honor timestamps.
  #    When false, all quota values will be fetched instantaneously, during metrics collection.
  #    Not recommended when having thousands of PVCs
  enableBatchModeForQuotaUpdates: false
  # -- Resources for metrics server pods
  resources:
    requests:
      cpu: 2
      memory: 4Gi
# -- Log level of CSI plugin
logLevel: 5
# -- Use JSON structured logging instead of human-readable logging format (for exporting logs to structured log parser)
useJsonLogging: false
# -- Optional CSI Plugin priorityClassName
priorityClassName: ""
# -- Support SELinux labeling for Persistent Volumes, may be either `off`, `mixed`, `enforced` (default off)
#    In `enforced` mode, CSI node components will only start on nodes having a label `selinuxNodeLabel` below
#    In `mixed` mode, separate CSI node components will be installed on SELinux-enabled and regular hosts
#    In `off` mode, only non-SELinux-enabled node components will be run on hosts without label.
#    WARNING: if SELinux is not enabled, volume provisioning and publishing might fail!
#    NOTE: SELinux support is enabled automatically on clusters recognized as RedHat OpenShift Container Platform
selinuxSupport: "off"
# -- This label must be set to `"true"` on SELinux-enabled Kubernetes nodes,
#    e.g., to run the node server in secure mode on SELinux-enabled node, the node must have label
#    `csi.weka.io/selinux_enabled="true"`
selinuxNodeLabel: "csi.weka.io/selinux_enabled"
# -- If true, the SELinux policy machine configuration will not be removed when uninstalling the plugin.
#    This is useful for OpenShift Container Platform clusters, to not cause machine config pool update on plugin reinstall
selinuxOcpRetainMachineConfig: false
# -- kubelet path, in cases Kubernetes is installed not in default folder
kubeletPath: "/var/lib/kubelet"
metrics:
  # -- Enable Prometheus Metrics
  enabled: true
  # -- Metrics port for Controller Server
  controllerPort: 9090
  # -- Provisioner metrics port
  provisionerPort: 9091
  # -- Resizer metrics port
  resizerPort: 9092
  # -- Snapshotter metrics port
  snapshotterPort: 9093
  # -- Metrics port for Node Serer
  nodePort: 9094
  # -- Attacher metrics port
  attacherPort: 9095
  # -- Metrics server metrics port
  metricsServerPort: 9096
# -- Tracing URL (For Jaeger tracing engine / OpenTelemetry), optional
# @ignore
tracingUrl: ""
# @ignore
tracingDeploymentIdentifier: ""
# -- Set to true to use host networking. Will be always set to true when using NFS mount protocol
hostNetwork: false
pluginConfig:
  # -- CSI Driver support for fsGroupPolicy, may be either "File" or "None". Default is "File"
  # -- WARNING: Changing this value might require uninstall and re-install of the plugin
  fsGroupPolicy: "File"
  # -- Allow insecure HTTPS (skip TLS certificate verification)
  allowInsecureHttps: false
  objectNaming:
    # -- Prefix that will be added to names of Weka cluster filesystems / snapshots assocciated with CSI volume,
    #    must not exceed 7 symbols.
    volumePrefix: "csivol-"
    # -- Prefix that will be added to names of Weka cluster snapshots assocciated with CSI snapshot,
    #    must not exceed 7 symbols.
    snapshotPrefix: "csisnp-"
    # -- Prefix that will be added to automatically created "seed" snapshot of empty filesytem,
    #    must not exceed 12 symbols.
    seedSnapshotPrefix: "csisnp-seed-"
  allowedOperations:
    # -- Allow automatic provisioning of CSI volumes based on distinct Weka filesystem
    autoCreateFilesystems: true
    # -- Allow automatic expansion of filesystem on which Weka snapshot-backed CSI volumes,
    #    e.g. in case a required volume capacity exceeds the size of filesystem.
    #    Note: the filesystem is not expanded automatically when a new directory-backed volume is provisioned
    autoExpandFilesystems: true
    # -- Create snapshots of directory-backed (dir/v1) volumes. By default disabled.
    #    Note: when enabled, every snapshot of a directory-backed volume creates a full filesystem snapshot (wasteful)
    snapshotDirectoryVolumes: false
    # -- Allow creation of snapshot-backed volumes even on unsupported Weka cluster versions, off by default
    #    Note: On versions of Weka < v4.2 snapshot-backed volume capacity cannot be enforced
    snapshotVolumesWithoutQuotaEnforcement: false
    # -- Should the CSI plugin wait for object deletion before reporting completion.
    #    If true, the plugin will report success on deletion of volumes while the actual deletion of objects will be done in the background.
    #    If false, the plugin will report success only after the objects are deleted on WEKA cluster.
    #    Usually, async deletion would drastically increase speed of volume deletions, since deletion is performed serially.
    #    However, it may cause objects on Weka cluster to remain if the plugin crashes or is restarted before the deletion is completed.
    allowAsyncObjectDeletion: true
  mutuallyExclusiveMountOptions:
    - "readcache,writecache,coherent,forcedirect"
    - "sync,async"
    - "ro,rw"
  encryption:
    # -- Allow encryption of Weka filesystems associated with CSI volumes without using external KMS server.
    #    Should never be run in production, only for testing purposes
    allowEncryptionWithoutKms: false
  mountProtocol:
    # -- Use NFS transport for mounting Weka filesystems, off by default
    useNfs: false
    # -- Allow Failback to NFS transport if Weka client fails to mount filesystem using native protocol
    allowNfsFailback: false
    # -- Specify name of NFS interface group to use for mounting Weka filesystems. If not set, first NFS interface group will be used
    interfaceGroupName: ""
    # -- Specify existing client group name for NFS configuration. If not set, "WekaCSIPluginClients" group will be created
    clientGroupName: ""
    # -- Specify NFS protocol version to use for mounting Weka filesystems. Default is "4.1", consult Weka documentation for supported versions
    nfsProtocolVersion: "4.1"
  # -- Skip garbage collection of deleted directory-backed volume contents and only move them to trash. Default false
  skipGarbageCollection: false
  # -- Allow CSI plugin to manage node topology labels. For Operator-managed clusters, this should be set to false.
  manageNodeTopologyLabels: true
  # -- WEKA API timeout, default 60 seconds
  apiTimeoutSeconds: 60
